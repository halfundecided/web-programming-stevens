#+STARTUP: showall
#+OPTIONS: num:nil toc:nil

* Lecture 01: Introduction

** Course Introduction

*** What will we be covering in this course? 
In this course, we will be talking out knowledge of basic website development and applying those principals to more complex web applications with modern technology.   
+ You will be learning advanced CSS techniques 
+ You will be subject to more detailed security issues 
+ You will learn to split up backend and frontend components through the use of JavaScript frameworks 
+ You will learn to use modern technology and multiple processes to achieve very fast web applications

*** How will we cover this material?
Throughout the semester, we will be learning about out new technologies and skills with assignments focused on each week's content.  
Most weeks, we will be seeing how our technologies end up playing a role in a single page application environment. The end goal of this course is to submit a sinple page application that works in a distributed-worker environment.  
Each week, we will also be covering an industry-topic. This will be a 15 - 30 minute introduction to a technology, strategy, or tool you will use extensively during the course of your time working in the industry as a developer.  
The general format of each lecture will be 90 minutes of lecture and discussion, followed by assignment work.  

*** Grade Breakdown 
+ Assignments: 50%
  + Assignments will be weighted equally 
  + Assignments will be given most weeks of the course 
+ Final Project Implementation Plan: 5%
  + Student will form groups to create a web application, and create an implementation plan detailing all the technology they will be using to create the application. Each group will meeting with the professor to discuss their plan. 
+ Final Project: 45%
  + For the final project, students will create a web application with multiple backend and frontend components working together, as well as present all aspects of the product to the class. 

*** What will we do in this course?
In this course, you will: 
  + Complete many assignments that will assess your understanding of the topics covered in class. These will be programming assignments that you will begin in class most weeks. 
  + Form a group and come up with an idea for a full web application to use as your final project, which you will submit in the form of a final project proposal.
  + Create an implementation plan and discuss it with the professor. 
  + Give a technical presentation demonstrating your project result. 
  + Submit your final project code. 

*** What are assignments like? 
There will be assignments most week, designed to make you practice the material that we will go over in class that week.  
Each assignment will give you a good foundation for the technologies and techniques you will use for the final project.  
Assignments are incremental: you will be carrying techniques from earlier assignments into later assignments. 

*** What is the final project like? 
For your final project, you will create a complex web application that fulfills all of the following: 
  + Uses a frontend framework to create a single page application
  + Has a responsive design so that the same view works across all sizes of devices 
  + Runs multiple processes through use of a worker and a web server.
  + Uses At least two technologies not covered in the course and integrate it into your technology stack. 
  + Can defend against more complex security attacks 
  + Uses a NoSQL database 
  + Extensively uses AJAX
  + Performs DOM Manipulation and event handling through jQuery or other frameworks 

*** General Policies and Notes 
You will have ample time to complete each assignment, so lateness will be harshly penalized: 
  + Late assignments will receive a 15 point reduction per day; this penalty starts the second your assignment is late 
  + There is no lateness tolerated on final project components; if you miss a deadline, you will receive a 0 for that component.
  + If some extenuating circumstance occurs that will cause you to be late, and you know in advance that it will cause you to be late, reach out to me as soon as possible.  
In lieu of a textbook, assignments may suggest research material to assist in their completion. It is beneficial to read the assignments and any suggested research material when the material is posted.  
If you are having a group issue during the final project period, you must reach out to me as soon as possible; it is much easier for everyone to resolve issues early and amicably than let them destroy a group as the deadline approaches. 

*** Readings 
Some lectures will come with accompanying slides discussing research and reference materials. I highly suggest that you read all material suggested.  
It is highly beneficial to read both the lectures slides and reference material before class as a form of preparation.  
For many assignments and parts of your final project, you will be expected to read some form of documentation in order to learn how to use a particular technology or package. 

* Lecture 01: ES6 and Fundamentals of Web Development 

** ES6: Changes to the JavaScript language 
*** What is ES6?
+ ES6 is the most recent spec of what constitutes the JavaScript language. It is, at this point, mostly adopted on the Node side. 
+ ES6 provides a series of very large conveniences, especially with easier asynchronous code handling.

*** What is async/await? 
+ Handling asynchronous code often leads to massive lines of confusing promises, orfiendishly long callback chains.
+ In order to eliminate this, ES6 introduces a syntax for unraveling a promise, known as `async` and `await`. 
+ This is, single handedly, the best thing to happen to the language since its creation. 

*** What does async mean? 
+ You can now define a function as an `async` function. This means that the function body will automatically be wrapped in a promise, and will return a promise (even if, syntactically, it just returns a value without any async code).
+ Async functions have the benefit of being able to `await` promises (and, therefore, other async functions).
+ Async functions are the only types of function that can `await` promises. 

*** What does awaiting do? 
#+STARTUP: showall
#+OPTIONS: num:nil toc:nil

* Lecture 01: Introduction

** Course Introduction
*** Grade Breakdown
| Material                   | Weight | Comment                                                                                                                                                                   |
|----------------------------+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Labs                       |    30% | Labs will be weighted equally. Labs will be given most weeks and cover the cover the content learned that week.                                                           |
| In-Class Exercises/Quizzes |    10% | Most weeks we will have an in-class exercise or quiz.  You MUST attend the class to get credit for the in-class assignment or quiz.                                       |
| Final Project Proposal     |     5% | Students will form groups and propose a final project to work on throughout thesemester.                                                                                  |
| Project Pitch              |    10% | Each group will give a non-technical in-class presentation of their project, explaining what use case it solves,  who the audience is, and why it’s a worthwhile project. |
| Database Proposal          |     5% | You will give a technical presentation showcasing your project’s features and technological decisions.                                                                    |
| Final Project              |    30% | Each group will submit their project code and a database dump to be reviewed and graded based on  what was promised in their proposal and delivered.                      |

*** What will we be covering in this course? 
+ A modern web programming environment by using Node.js, MongoDB, and Express.
+ How to do server-side programming. 
+ How to use a modern database. 
+ How to code for the client.
+ Web accessibility and the major hurdles that many people face using the web as it is today, how to identify issues that exist in a web page, as well as how to correct them. 
+ advanced client-side programming techniques.
+ Create a market-ready database driven web-application, from start to finish, involving technical presentations.

*** What will we do in this course?
In this course, you will:
+ Complete a number of labs that will assess your understanding of the topics covered in class. These will be simple programming assignments that will serve to help you on your assignments
+ You will be placed into groups and your group will need to come up with an idea for a full web application to use as your final project, which you will submit in the form of a final project proposal.
+ Setup your database schema and submit a database proposal.
+ Give a non technical presentation detailing yoour prooject idea.
+ Give a technocal presentation demonstrating your project result.
+ Submit your final project code.

*** What is the final project like? 
For your final project, you will create a market-ready, database-driven application as part of a team. Your application will incorporate aspects from the entirety of the course. 
The final project has several components to it, both technical and non-technical. 
+ You will be placed in grooups and submit a project proposal.
+ You will submit a proposed format for your database.
+ You will give an in-class non-technical presentation detailing what your product is, who the user would be, and why the project is worthwhile to take on.
+ You will give a technical presentation detailing youor features and the technical decisions yoou made.
+ You will submit your codebase and a database dump and deliver the actual product. 

*** Technologies and Tools
+ Git: For Version Control
+ Node.js (Server-Side JavaScript)
+ MongoDB: document based database
+ tota11y: an accessibility testing tool created by Khan Academy http://khan.github.io/tota11y/
+ HTML and CSS
+ JavaScript: https://developer.mozilla.org/en-US/Learn/Getting_started_with_the_web/JavaScript_basics

** Intro to JavaScript
*** What is Node.js? 
Node.js is a JavaScript runtime environment that runs on a computer, rather than in a browser. Node.js often comes bundled with npm, the Node.js Package Manager, which allows you to add dependencies
+ In node, you use the require function to require other modules (from packages, or from other files)

*** What is a module? 
Generally, a module is an individual unit that can be plugged into another system or codebase with relative ease. Modules do not have to be related, allowing you to write a system that allows many different things to interact with each other by writing code that glues them all together. They are very flexible, and allow you to organize your code very well. 

*** What are packages and npm?
Node.js has a massive repository of published code that you can very eaily pull into your assignments (where applicable) through the node package manager(npm). You will require the modules that your packages export, and use code that other people have created, tested, and tried. You will then use these packages to expand on your own applications and build out fully functional applications. 

*** Some basic facts about JavaScript 
JavaScript is a loosely typed language, a concept that you may have seen before. There are five primitives currently, with a sixth (symbol) on the way
+ Boolean 
+ Number
+ String
+ Null
+ Undefined  
JavaScript also has Objects, which all non-primitives fall under 
+ Functions in JavaScript are types of Objects
+ Objects are prototypical 

*** Defining Variables 
| Keyword | Scope      | Explanation                                                                                      | Example                 |
|---------+------------+--------------------------------------------------------------------------------------------------+-------------------------|
| const   | Block      | Initializes a block scoped variable that cannot get overwritten. Most common used in this course | ~const twelve = 2 + 10~ |
| let     | Block      | Initializes a block scoped variable that can get overwritten.                                    | ~let squareSum = 0;~    |
| var     | Functional | Initializes a variable that can get overwritten; not used in course.                             | ~var twelve = 2+10;~    |

*** Basic Syntax and Strings
Check [[https://github.com/halfundecided/web-programming-stevens/blob/master/web-programming-1/lecture-notes/lecture01/strings.js][strings.js]]

*** Booleans and Equality 
JavaScript is a truthy language; that means that many things can evaluate as "true" or "false". There are two ways of checking for equality in JavaScript; ~==~ and ~===~. We more commonly use ~===~. The ~===~ operator checks that both the type and value match. Getting into the habit of using ~===~ will help with some truthy logical mixups later on. Check out [[https://github.com/halfundecided/web-programming-stevens/blob/master/web-programming-1/lecture-notes/lecture01/booleans.js][boolean.js]]

*** Numbers
Numbers in JavaScript are fairly standard; there are no ~int~ vs ~float~ numerical type issues, as they are all simply ~number~ typed. There is a Global Math object that will give you many arithmetic methods. 
Check https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math and [[][numbers.js]]

*** Functions 
There are several ways to write functions in JavaScript:
 
**** Named functions 
Names functions are accessible anywhare in the scope that defines them. 
#+BEGIN_SRC
function myGlobalFunction() {
   console.log("I'm a global function");
}
#+END_SRC
Check this out! [[][functions.js]]
